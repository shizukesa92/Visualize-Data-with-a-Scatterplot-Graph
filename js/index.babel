// Fetch Data

const req = new XMLHttpRequest();
req.open("GET", "https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/cyclist-data.json", true);
req.send();


req.onload = () => {
	let data = JSON.parse(req.responseText);

	// Initiating variables
	const tooltip = d3.tip() // https://github.com/Caged/d3-tip
		.attr("class", "tooltip")
		.html(d => {
			let doping = `<span>${d.Name}</span><br/>${d.Year}<br/>${d.Nationality}`;
			d.doping !== "" ?
				doping += `<br/>${d.Doping}` :
				doping += `<br/>No doping allegations`;

			return doping;
		});

	// Add seconds slower than fastest time and whether there are doping allegations as object properties				
	const fastest = Math.min.apply(Math, data.map(cyclists => {
		return cyclists.Seconds;
	})) // https://stackoverflow.com/questions/4020796/finding-the-max-value-of-an-attribute-in-an-array-of-objects?
	data.forEach(cyclist => {
		cyclist.slower = cyclist.Seconds - fastest;
		cyclist.Doping != "" ?
			cyclist.legend = "Doping Allegations" :
			cyclist.legend = "No Doping Allegation";

	});

	// Relative height and width of the SVG. Actual height and width are defined within CSS and not appended (contrary to what FCC tutorial taught) 
	// Note 2:1 ratio because container ratio is roughly 2:1
	const padding = {
			top: 50,
			bottom: 50,
			left: 100,
			right: 10
		},
		w = 1000 - padding.left - padding.right,
		h = 550 - padding.top - padding.bottom;

	let width = Math.ceil(w / data.length);

	//Set scaling
	const maxSlower = Math.max.apply(Math, data.map(cyclists => {
			return cyclists.slower;
		})),
		minSlower = Math.min.apply(Math, data.map(cyclists => {
			return cyclists.slower;
		}));

	const xScale = d3.scaleLinear()
		.domain([maxSlower, minSlower]) // Note here that graph goes from max to min
		.range([0, w]);

	const maxPlace = Math.max.apply(Math, data.map(cyclists => {
			return cyclists.Place;
		})),
		minPlace = Math.min.apply(Math, data.map(cyclists => {
			return cyclists.Place;
		}));
	const yScale = d3.scaleLinear()
		.domain([maxPlace, minPlace]) // Note here that graph goes from max to min
		.range([h, 0]);

	const xAxis = d3.axisBottom(xScale),
		yAxis = d3.axisLeft(yScale);

	// Set SVG dimensions and append axes
	let chart = d3.select("svg")
		.attr("width", w + padding.right + padding.left)
		.attr("height", h + padding.bottom + padding.top)

	chart.append("g")
		.attr("transform", `translate(${padding.left},${h+padding.top})`)
		.call(xAxis)
	chart.append("text")
		.attr("transform", `translate(${(w+padding.right+padding.left)/2},${h+padding.bottom+padding.top})`)
		.style("text-anchor", "middle")
		.text("Seconds Behind Fastest Time");


	chart.append("g")
		.attr("transform", `translate(${padding.left},${padding.top})`)
		.call(yAxis)
	chart.append("text")
		.attr("transform", "rotate(-90)")
		.attr("y", padding.left + padding.right)
		.attr("x", 0 - ((h + padding.top + padding.bottom) / 2))
		.attr("dy", "-3em")
		.style("text-anchor", "middle")
		.text("Ranking");

	//Labels
	chart.append("text")
		.attr("x", (w / 2))
		.attr("dx", "8em")
		.attr("y", padding.top)
		.attr("text-anchor", "middle")
		.text("35 Fastest times up Alpe d'Huez Normalized to 13.8km distance")

}
