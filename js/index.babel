// Fetch Data

const req = new XMLHttpRequest();
req.open("GET", "https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/cyclist-data.json", true);
req.send();


req.onload = () => {
	let data = JSON.parse(req.responseText);

	// Initiating variables
	const tooltip = d3.tip() // https://github.com/Caged/d3-tip
		.attr("class", "tooltip")
		.html(d => {
			let doping = `<span>${d.Name}</span><br/>${d.Year}<br/>${d.Nationality}`;
			d.doping !== "" ?
				doping += `<br/>${d.Doping}` :
				doping += `<br/>No doping allegations`;

			return doping;
		});

	// Add seconds slower than fastest time and whether there are doping allegations as object properties				
	const fastest = Math.min.apply(Math, data.map(cyclists => {
		return cyclists.Seconds;
	})) // https://stackoverflow.com/questions/4020796/finding-the-max-value-of-an-attribute-in-an-array-of-objects?
	data.forEach(cyclist => {
		cyclist.slower = cyclist.Seconds - fastest;
		cyclist.legend = cyclist.Doping != "" ? "Doping Allegations" :
			"No Doping Allegation";

	});
	// Relative height and width of the SVG. Actual height and width are defined within CSS and not appended (contrary to what FCC tutorial taught) 
	// Note 2:1 ratio because container ratio is roughly 2:1
	const padding = {
			top: 50,
			bottom: 50,
			left: 100,
			right: 10
		},
		w = 1000 - padding.left - padding.right,
		h = 550 - padding.top - padding.bottom;

	let width = Math.ceil(w / data.length);

	//Set scaling
	const maxSlower = Math.max.apply(Math, data.map(cyclists => {
			return cyclists.slower;
		})),
		minSlower = Math.min.apply(Math, data.map(cyclists => {
			return cyclists.slower;
		}));

	const xScale = d3.scaleLinear()
		.domain([maxSlower, minSlower]) // Note here that graph goes from max to min
		.range([0, w]);

	const maxPlace = Math.max.apply(Math, data.map(cyclists => {
			return cyclists.Place;
		})),
		minPlace = Math.min.apply(Math, data.map(cyclists => {
			return cyclists.Place;
		}));
	const yScale = d3.scaleLinear()
		.domain([maxPlace, minPlace]) // Note here that graph goes from max to min
		.range([h, 0]);

	const xAxis = d3.axisBottom(xScale),
		yAxis = d3.axisLeft(yScale);

	// Set SVG dimensions and append axes
	let chart = d3.select("svg")
		.attr("width", w + padding.right + padding.left)
		.attr("height", h + padding.bottom + padding.top)

	chart.append("g")
		.attr("transform", `translate(${padding.left},${h+padding.top})`)
		.call(xAxis)

	chart.append("g")
		.attr("transform", `translate(${padding.left},${padding.top})`)
		.call(yAxis)

	//Labels
	chart.append("text") // Title
		.attr("x", (w / 2))
		.attr("dx", "8em")
		.attr("y", padding.top)
		.attr("text-anchor", "middle")
		.text("35 Fastest times up Alpe d'Huez Normalized to 13.8km distance")

	chart.append("text") // X-axis
		.attr("transform", `translate(${(w+padding.right+padding.left)/2},${h+padding.bottom+padding.top})`)
		.style("text-anchor", "middle")
		.text("Seconds Behind Fastest Time");

	chart.append("text") // Y axis
		.attr("transform", "rotate(-90)")
		.attr("y", padding.left + padding.right)
		.attr("x", 0 - ((h + padding.top + padding.bottom) / 2))
		.attr("dy", "-3em")
		.style("text-anchor", "middle")
		.text("Ranking");

	// Legend
	chart.append("circle")
		.attr("cx", d =>
			xScale(10)
		)
		.attr("cy", d =>
			yScale(20)
		)
		.attr("r", 5)
		.attr("fill", "black");

	chart.append("text")
		.attr("x", d =>
			xScale(7)
		)
		.attr("y", d =>
			yScale(20) + 4
		)
		.attr("text-anchor", "left")
		.text("No doping allegations");

	chart.append("circle")
		.attr("cx", d =>
			xScale(10)
		)
		.attr("cy", d =>
			yScale(23)
		)
		.attr("r", 5)
		.attr("fill", "red");

	chart.append("text")
		.attr("x", d =>
			xScale(7)
		)
		.attr("y", d =>
			yScale(23) + 4
		)
		.attr("text-anchor", "left")
		.text("Riders with doping allegations");

	//Append Data as Circles
	chart.selectAll("circle")
		.data(data)
		.enter()
		.append("circle")
		.attr("class", "circle")
		.attr("cx", d =>
			xScale(d.slower) + padding.left
		)
		.attr("cy", d =>
			yScale(d.Place) + padding.top
		)
		.attr("r", 5)
		.attr("fill", d => d.Doping == "" ? "black" : "red")
		.attr("data-legend", d =>
			d.legend
		)
		.on("mouseover", d => {
			tooltips.transition()
				.duration(200)
				.style("opacity", .9);
			tooltips.html(create(d)) // Function defined below
				.style("left", (d3.event.pageX + 20) + "px") //https://bl.ocks.org/mbostock/1087001
				.style("top", (d3.event.pageY + 20) + "px");
		});


	// Tooltip
	let tooltips = d3.select("#chart")
		.append("div")
		.attr("class", "tooltip")
		.style("opacity", 0)
	let create = (d) => {
		let tooltip = `<span> ${d.Name} : ${d.Nationality} </span>`;
		tooltip += `<br/>Year: ${d.Year}, Time: ${parseInt(d.Seconds / 60)}:${d.Seconds % 60}<br/>`;
		d.doping !== "" ?
			tooltip += "<br/>" + d.Doping :
			tooltip += "<br/>No Doping Allegation";

		return tooltip;
	}

}
